#!/bin/bash
# Created by Guillaume Leurquin, guillaume.leurquin@accenture.com

# This scipt creates a signing identity from the public certificate of a user.
# It takes as first argument the path to the folder that contains all the user's
# certificates, generated by cryptogen.py
# It outputs a signing identity json file, along with the private and public key
# named after the signingIdentity and saved in generated/hfc-key-store

set -eu -o pipefail

USER_FOLDER=$1

USER_FULL_NAME=$(basename $USER_FOLDER)
CERT_FILE=$USER_FOLDER/ca/ca.$USER_FULL_NAME-cert.pem
KEY_FILE=$USER_FOLDER/ca/ca.$USER_FULL_NAME-key.pem
USER_BASE_NAME=$( cut -d '.' -f 1 <<< "$USER_FULL_NAME" )
ORG=$( cut -d '.' -f 2- <<< "$USER_FULL_NAME" )

INSTALL_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

if [ ! -d "$INSTALL_DIR/node_modules" ]; then
  pushd $INSTALL_DIR
    npm install
  popd
fi

signingIdentity=$(node "$INSTALL_DIR/generateSigningIdentity.js" "$CERT_FILE")

hfcKeyStorePath=$GEN_PATH/hfc-key-store
mkdir -p $hfcKeyStorePath

# Get only certificate part from the file and replace new lines by literal \n
CERT_NO_NEWLINES=$(printf "%s\\\n" $(openssl x509 -in $CERT_FILE | tr " " "*") | tr "*" " ")

echo """{
  \"name\": \"$USER_BASE_NAME\",
  \"mspid\": \"${ORG//./-}-MSP\",
  \"roles\": null,
  \"affiliation\": \"\",
  \"enrollmentSecret\": \"\",
  \"enrollment\": {
    \"signingIdentity\": \"$signingIdentity\",
    \"identity\": {
      \"certificate\": \"$CERT_NO_NEWLINES\"
    }
  }
}
""" > $hfcKeyStorePath/$USER_BASE_NAME


cp $CERT_FILE $hfcKeyStorePath/$signingIdentity-pub
cp $KEY_FILE $hfcKeyStorePath/$signingIdentity-priv
